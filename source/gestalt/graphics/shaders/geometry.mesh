#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_mesh_shader  : require
#extension GL_ARB_shader_draw_parameters : require
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_shader_explicit_arithmetic_types: require
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require

#include "per_frame_structs.glsl"
#include "meshlet_structs.glsl"
#include "math.glsl"

layout(local_size_x = MESH_WGSIZE, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = MESH_MAXVTX, max_primitives = MESH_MAXTRI) out;

layout(location = 0) out vec2 outUV[];
layout(location = 1) out vec4 outNormal_BiTanX[];
layout(location = 2) out vec4 outTangent_BiTanY[];
layout(location = 3) out vec4 outPosition_BiTanZ[];
layout(location = 4) out flat uint outMaterialIndex[];

taskPayloadSharedEXT MeshTaskPayload payload;

layout( push_constant ) uniform constants
{
    int cullFlags;
	float pyramidWidth, pyramidHeight; // depth pyramid size in texels
	int clusterOcclusionEnabled;
} PushConstants;

layout(set = 2, binding = 0) readonly buffer VertexPositionBuffer{ 
	VertexPosition vertex_positions[];
};

layout(set = 2, binding = 1) readonly buffer VertexDataBuffer{ 
	VertexData vertex_data[];
};

layout(set = 2, binding = 2) readonly buffer Meshlets
{
    Meshlet meshlets[];
};

layout(set = 2, binding = 3) readonly buffer MeshletVertexBuffer
{
    int meshletVertices[];
};

layout(set = 2, binding = 4) readonly buffer MeshletIndexBuffer
{
    uint8_t meshletIndices[];
};

layout(set = 2, binding = 6) readonly buffer Draws
{
    MeshDraw draws[];
};

const float i8_inverse = 1.0 / 127.0;


void main()
{
    uint ti = gl_LocalInvocationIndex;
    uint mi = payload.meshletIndices[gl_WorkGroupID.x]; // Retrieve meshlet index from payload

    MeshDraw meshDraw = draws[payload.drawId];

    uint vertexCount = uint(meshlets[mi].vertexCount); // Number of vertices in the meshlet
    uint triangleCount = uint(meshlets[mi].triangleCount); // Number of triangles in the meshlet
    
    // Set the number of vertices and triangles for the meshlet
    SetMeshOutputsEXT(vertexCount, triangleCount);

    uint vertexOffset = meshlets[mi].vertexOffset;
    uint indexOffset = meshlets[mi].indexOffset;
    
    // Process each vertex in the meshlet
    for (uint i = ti; i < vertexCount; )
    {
        uint vi = meshletVertices[vertexOffset + i] + meshDraw.vertexOffset;

        VertexPosition v = vertex_positions[vi];
        VertexData data = vertex_data[vi];

        outUV[i] = vec2(data.tu, data.tv);

        vec3 position = transform(v.position, meshDraw.position, meshDraw.scale, meshDraw.orientation);
        outPosition_BiTanZ[i].xyz = position;
        vec4 clip = proj * view * vec4(position, 1.0);
        gl_MeshVerticesEXT[i].gl_Position = clip;

        vec3 normal = vec3(int(data.nx), int(data.ny), int(data.nz)) * i8_inverse - 1.0;
        normal = normalize(rotateQuat(normal, meshDraw.orientation));
        outNormal_BiTanX[i].xyz = normal;

        vec3 tangent = vec3(int(data.tx), int(data.ty), int(data.tz)) * i8_inverse - 1.0;
        tangent = normalize(rotateQuat(tangent, meshDraw.orientation));
        outTangent_BiTanY[i].xyz = tangent;

        vec3 bitangent = cross(outNormal_BiTanX[i].xyz, tangent) * (int(data.tw) * i8_inverse  - 1.0 );
        outNormal_BiTanX[i].w = bitangent.x;
        outTangent_BiTanY[i].w = bitangent.y;
        outPosition_BiTanZ[i].w = bitangent.z;

        outMaterialIndex[i] = meshDraw.materialIndex;

	#if MESH_MAXVTX <= MESH_WGSIZE
		break;
	#else
		i += MESH_WGSIZE;
	#endif
    }
    
    // Process each triangle in the meshlet
    for (uint i = ti; i < triangleCount; )
    {
        //uint offset = indexOffset * 4 + i * 3;
        uint offset = indexOffset + i * 3;
        uint a = uint(meshletIndices[offset]), b = uint(meshletIndices[offset + 1]), c = uint(meshletIndices[offset + 2]);

        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(a, b, c);

        
	#if MESH_MAXTRI <= MESH_WGSIZE
		break;
	#else
		i += MESH_WGSIZE;
	#endif
    }
}