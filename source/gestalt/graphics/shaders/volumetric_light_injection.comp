#version 450

#extension GL_GOOGLE_include_directive: require

#include "volumetric_light_util.glsl"

layout(push_constant) uniform constants
{
    vec2 halton_xy;
    float temporal_reprojection_jitter_scale;
    float density_modifier;

    uvec3 froxel_dimensions;
    int current_frame;

    float noise_scale;
    uint noise_type;
    float froxel_near;
    float froxel_far;

    mat4 froxel_inverse_view_projection;

    float volumetric_noise_position_multiplier;
    float volumetric_noise_speed_multiplier;
    float height_fog_density;
    float height_fog_falloff;

    vec3 box_position;
    float box_fog_density;

    vec3 box_size;
    float scattering_factor;
} PushConstants;

layout (local_size_x = FROXEL_DISPATCH_X, local_size_y = FROXEL_DISPATCH_Y, local_size_z = FROXEL_DISPATCH_Z) in;

layout(binding = 0) uniform sampler2D blue_noise;
layout(binding = 1) uniform sampler3D volumetric_noise_texture;
layout(binding = 2) writeonly uniform image3D froxel_data_texture;

void main() {
    ivec3 froxel_coord = ivec3(gl_GlobalInvocationID.xyz);

    vec3 world_position = world_from_froxel(
        froxel_coord,
        PushConstants.halton_xy,
        PushConstants.temporal_reprojection_jitter_scale,
        PushConstants.froxel_dimensions,
        PushConstants.current_frame,
        PushConstants.noise_scale,
        PushConstants.noise_type,
        blue_noise,
        PushConstants.froxel_near,
        PushConstants.froxel_far,
        PushConstants.froxel_inverse_view_projection
    );


    vec4 scattering_extinction = vec4(0.0);

    vec3 sampling_coord = world_position * PushConstants.volumetric_noise_position_multiplier + vec3(1,0.1,2) * PushConstants.current_frame * PushConstants.volumetric_noise_speed_multiplier;

    float fog_noise = texture(volumetric_noise_texture, sampling_coord).r;
    
    fog_noise =  clamp(fog_noise * fog_noise, 0.0f, 1.0f);

    // Add constant fog
    float fog_density = PushConstants.density_modifier * fog_noise;

    scattering_extinction += scattering_extinction_from_color_density( vec3(0.5), fog_density, PushConstants.scattering_factor );
    // Add height fog
    float height_fog = PushConstants.height_fog_density * exp(-PushConstants.height_fog_falloff * max(world_position.y, 0)) * fog_noise;
    scattering_extinction += scattering_extinction_from_color_density( vec3(0.5), height_fog, PushConstants.scattering_factor );

    // Add density from box
    vec3 box = abs(world_position - PushConstants.box_position);
    if (all(lessThanEqual(box, PushConstants.box_size))) {

        vec4 box_fog_color = vec4(1.0); // white, check if this is fine

        scattering_extinction += scattering_extinction_from_color_density( box_fog_color.rgb, PushConstants.box_fog_density * fog_noise, PushConstants.scattering_factor);
    }

    imageStore( froxel_data_texture, froxel_coord.xyz, scattering_extinction );
}